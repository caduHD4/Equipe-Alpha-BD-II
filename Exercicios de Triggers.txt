DROP DATABASE IF EXISTS marcos_db;

CREATE DATABASE marcos_db;

USE marcos_db;

CREATE TABLE estado(
id INT NOT NULL AUTO_INCREMENT
,nome VARCHAR (200) NOT NULL 
,sigla CHAR (2) NOT NULL 
,situaçao CHAR (1) NOT NULL DEFAULT 'A'
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,CONSTRAINT pk_estado PRIMARY KEY (id)
,CONSTRAINT coluna_situaçao_estado CHECK (situaçao IN ('A','I'))
,CONSTRAINT estado_unico UNIQUE (nome,sigla)
);

INSERT INTO estado (nome,sigla) VALUES ('PARANÁ','PR');
INSERT INTO estado (nome,sigla) VALUES ('SÃO PAULO','SP');


CREATE TABLE cidade(
id INT NOT NULL AUTO_INCREMENT
,nome VARCHAR (200) NOT NULL
,situaçao CHAR (1) NOT NULL DEFAULT 'A'
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,estado_id INT NOT NULL
,CONSTRAINT pk_cidade PRIMARY KEY (id)
,CONSTRAINT fk_cidade_estado FOREIGN KEY (estado_id) REFERENCES estado (id)
,CONSTRAINT coluna_situaçao_cidade CHECK (situaçao IN ('A', 'I'))
,CONSTRAINT cidade_unica UNIQUE (nome, estado_id)
);

INSERT INTO cidade (nome,estado_id) VALUES ('PARANAVAÍ',1);
INSERT INTO cidade (nome,estado_id) VALUES ('CURITIBA',1);
INSERT INTO cidade (nome,estado_id) VALUES ('LONDRINA',1);
INSERT INTO cidade (nome,estado_id) VALUES ('CAMPINAS',2);

CREATE TABLE funcionario(
id INT NOT NULL AUTO_INCREMENT
,nome VARCHAR (200) NOT NULL
,cpf CHAR (12) NOT NULL
,endereço VARCHAR (200)
,situaçao CHAR (1) NOT NULL DEFAULT 'A'
,data_contratacao DATETIME NOT NULL 
,cidade_id INT NOT NULL
,CONSTRAINT pk_funcionario PRIMARY KEY (id)
,CONSTRAINT fk_funcionario_cidade FOREIGN KEY (cidade_id) REFERENCES cidade (id)
,CONSTRAINT coluna_situçao_funcionario CHECK (situaçao IN ('A','I'))
,CONSTRAINT funcionario_unico UNIQUE (cpf,cidade_id)
);

INSERT INTO funcionario (nome,cpf,endereço,data_contratacao,cidade_id) VALUES ('MARCOS',49978367845,'RUA DR SILVIO VIDAL JAD SÃO CRISTOVÃO NUMERO 355','2021-10-05',1);
INSERT INTO funcionario (nome,cpf,endereço,data_contratacao,cidade_id) VALUES ('ADRIANO',59223261233,'AVENIDA TANCREDO NEVES JAD PRUDÊNCIO NUMERO 945','2021-11-05',1);
INSERT INTO funcionario (nome,cpf,endereço,data_contratacao,cidade_id) VALUES ('RONALDO',10116445574,'RUA MANOEL RIBAS CENTRO NUMERO 641','2019-10-15',1);
INSERT INTO funcionario (nome,cpf,endereço,data_contratacao,cidade_id) VALUES ('JOANA',21318836958,'RUA SANTA CATARINA VILA CITY NUMERO 123','2023-10-05',1);

CREATE TABLE telefone(
id INT NOT NULL AUTO_INCREMENT
,ddd CHAR (2) NOT NULL
,numero CHAR (20) NOT NULL
,situaçao CHAR (1) NOT NULL DEFAULT 'A'
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,funcionario_id INT NOT NULL
,CONSTRAINT pk_telefone PRIMARY KEY (id)
,CONSTRAINT fk_telefone_funcionario FOREIGN KEY (funcionario_id) REFERENCES funcionario (id)
,CONSTRAINT coluna_situçao_telefone CHECK (situaçao IN ('A','I'))
,CONSTRAINT telefone_unico UNIQUE (funcionario_id)
);

INSERT INTO telefone (ddd,numero,funcionario_id) VALUES (44,995412297,1);
INSERT INTO telefone (ddd,numero,funcionario_id) VALUES (44,988416977,2);
INSERT INTO telefone (ddd,numero,funcionario_id) VALUES (44,999887023,3);
INSERT INTO telefone (ddd,numero,funcionario_id) VALUES (44,998374416,4);
 
CREATE TABLE caixa(
id INT NOT NULL AUTO_INCREMENT
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,situaçao CHAR (1) NOT NULL DEFAULT 'A'
,saldo DECIMAL (9,2)
,saldo_final DECIMAL (9,2)
,funcionario_id INT NOT NULL
,CONSTRAINT pk_caixa PRIMARY KEY (id)
,CONSTRAINT fk_caixa_funcionario FOREIGN KEY (funcionario_id) REFERENCES funcionario (id)
,CONSTRAINT coluna_situaçao_caixa CHECK (situaçao IN ('A','F'))
,CONSTRAINT caixa_unico UNIQUE (funcionario_id)
);

INSERT INTO caixa (saldo,saldo_final, funcionario_id) VALUES (1400.00,0,1);
INSERT INTO caixa (saldo,saldo_final, funcionario_id) VALUES (950.00,0,2);

CREATE TABLE iten_caixa(
id INT NOT NULL AUTO_INCREMENT
,valor DECIMAL (9,2)
,valor_novo DECIMAL (9,2)
,especie VARCHAR (45)
,hora VARCHAR (45)
,caixa_id INT NOT NULL
,CONSTRAINT pk_iten_caixa PRIMARY KEY (id)
,CONSTRAINT fk_iten_caixa_caixa FOREIGN KEY (caixa_id) REFERENCES caixa (id)
,CONSTRAINT iten_caixa_unico UNIQUE (caixa_id)
);

INSERT INTO iten_caixa (valor, valor_novo, caixa_id) VALUES (750.00, 0, 1);

CREATE TABLE cliente(
id INT NOT NULL AUTO_INCREMENT
,nome VARCHAR (200) NOT NULL
,endereço VARCHAR (200) NOT NULL
,contato VARCHAR (100) NOT NULL 
,telefone CHAR (20) NOT NULL
,ddd_telefone CHAR (2) NOT NULL 
,cpf_cnpj CHAR (20) NOT NULL 
,situaçao CHAR (1) NOT NULL DEFAULT 'A'
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,cidade_id INT NOT NULL
,CONSTRAINT pk_cliente PRIMARY KEY (id)
,CONSTRAINT fk_cliente_cidade FOREIGN KEY (cidade_id) REFERENCES cidade (id)
,CONSTRAINT coluna_situaçao_cliente CHECK (situaçao IN ('A','I'))
,CONSTRAINT cliente_unico UNIQUE (contato,cpf_cnpj,cidade_id)
);


INSERT INTO cliente (nome,cpf_cnpj,endereço,contato,telefone,ddd_telefone,cidade_id) VALUES ('JE EMPREENDIMENTOS',69304100000108,'RUA PERNAMBUCO CENTRO NUMERO 362','JE@GMAIL.COM',34226698,44,1);
INSERT INTO cliente (nome,cpf_cnpj,endereço,contato,telefone,ddd_telefone,cidade_id) VALUES ('MA BURITTI',85684280000157,'RUA AMADOR AGUIAR JAD OURO BRANCO NUMERO 455','MABURITTI@HOMTMAIL.COM',998346621,44,1);
INSERT INTO cliente (nome,cpf_cnpj,endereço,contato,telefone,ddd_telefone,cidade_id) VALUES ('JJ CONSTRUÇÕES',29385774000160,'RUA SALVADOR CENTRO NUMERO 1001','JJ@GMAIL.COM',34463366,44,1);
INSERT INTO cliente (nome,cpf_cnpj,endereço,contato,telefone,ddd_telefone,cidade_id) VALUES ('RUBENS',20019587008,'RUA PARA VILA MARIANA NUMERO 741','RUBENS@HOTMAIL.COM',997354142,44,1);
INSERT INTO cliente (nome,cpf_cnpj,endereço,contato,telefone,ddd_telefone,cidade_id) VALUES ('JOAO',30145298755,'RUA DISTRITO FEDERAL CENTRO NUMERO 678','JOAO_PEREIRA@GMAIL.COM',988745246,44,1);
INSERT INTO cliente (nome,cpf_cnpj,endereço,contato,telefone,ddd_telefone,cidade_id) VALUES ('MARIA',69304100000108,'AVENIDA DOMINGOS SANCHES PARQUE MORUMBI NUMERO 851','MARIA@HOTMAIL.COM',34224528,44,1);


CREATE TABLE serviço(
id INT NOT NULL AUTO_INCREMENT
,situaçao CHAR (1) NOT NULL DEFAULT 'C'
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,funcionario_id INT NOT NULL
,CONSTRAINT pk_serviço PRIMARY KEY (id)
,CONSTRAINT fk_serviço_funcionario FOREIGN KEY (funcionario_id) REFERENCES funcionario (id)
,CONSTRAINT coluna_situaçao_serviço CHECK (situaçao IN ('C','N')) -- C = Concluido ou N = Não Concluido
);

INSERT INTO serviço (funcionario_id) VALUES (2);
INSERT INTO serviço (funcionario_id) VALUES (2);
INSERT INTO serviço (funcionario_id) VALUES (1);
INSERT INTO serviço (funcionario_id) VALUES (1);
INSERT INTO serviço (funcionario_id) VALUES (2);

CREATE TABLE ordem_serviço(
id INT NOT NULL AUTO_INCREMENT
,valor DECIMAL (9,2)
,descriçao VARCHAR (200) NOT NULL
,pagamento VARCHAR (10) NOT NULL
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,cliente_id INT NOT NULL
,funcionario_id INT NOT NULL
,CONSTRAINT pk_ordem_serviço PRIMARY KEY (id)
,CONSTRAINT fk_ordem_serviço_cliente FOREIGN KEY (cliente_id) REFERENCES cliente (id)
,CONSTRAINT fk_ordem_serviço_funcionario FOREIGN KEY (funcionario_id) REFERENCES funcionario (id)
,CONSTRAINT ordem_serviço_unico UNIQUE (cliente_id,funcionario_id)
);

INSERT INTO ordem_serviço (valor,descriçao,pagamento,cliente_id,funcionario_id) VALUES (150.00,'Troca e Remanejamento de Tomadas','avista',1,2);
INSERT INTO ordem_serviço (valor,descriçao,pagamento,cliente_id,funcionario_id) VALUES (250.00,'Instalação de Luminárias','avista',2,1);
INSERT INTO ordem_serviço (valor,descriçao,pagamento,cliente_id,funcionario_id) VALUES (500.00,'Troca de Cabeamento Elétrico','parcelado',3,2);
INSERT INTO ordem_serviço (valor,descriçao,pagamento,cliente_id,funcionario_id) VALUES (1000.00,'Instação do Quadro de Distribuição de Energia','avista',4,3);

CREATE TABLE forma_pagamento(
id INT NOT NULL AUTO_INCREMENT
,descriçao VARCHAR (200) NOT NULL
,quantidade_parcela INT
,entrada CHAR (1)
,situaçao CHAR (1)
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,CONSTRAINT pk_forma_pagamento PRIMARY KEY (id)
);

INSERT INTO forma_pagamento (descriçao, quantidade_parcela,entrada,situaçao ) VALUES ("Devedor",5,'S','N');

CREATE TABLE conta_receber(
id INT NOT NULL AUTO_INCREMENT
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,forma_pagamento_id INT NOT NULL
,ordem_serviço_id INT NOT NULL
,CONSTRAINT pk_conta_receber PRIMARY KEY (id)
,CONSTRAINT fk_conta_receber_forma_pagamento FOREIGN KEY (forma_pagamento_id) REFERENCES forma_pagamento(id)
,CONSTRAINT fk_conta_receber_ordem_serviço FOREIGN KEY (ordem_serviço_id ) REFERENCES ordem_serviço (id)
);

INSERT INTO conta_receber (forma_pagamento_id, ordem_serviço_id) VALUES (1,1);

CREATE TABLE parcela_receber(
id INT NOT NULL AUTO_INCREMENT
,valor DECIMAL (9,2)
,valor_quitado DECIMAL (9,2)
,juros_pago DECIMAL (9,2)
,vencimento DATETIME NOT NULL
,conta_receber_id INT NOT NULL
,CONSTRAINT pk_parcela_receber PRIMARY KEY (id)
,CONSTRAINT fk_parcela_receber_conta_receber FOREIGN KEY (conta_receber_id) REFERENCES conta_receber (id)
);

INSERT INTO parcela_receber (valor, valor_quitado, juros_pago, vencimento, conta_receber_id) VALUES (950.00,0,0,'2021-10-05',1);

CREATE TABLE fornecedor(
id INT NOT NULL AUTO_INCREMENT
,nome VARCHAR (200) NOT NULL
,cnpj VARCHAR (200) NOT NULL
,endereço VARCHAR (200) NOT NULL
,telefone CHAR (20) NOT NULL
,ddd_telefone CHAR (2) NOT NULL 
,contato CHAR (100) NOT NULL 
,situaçao CHAR (1) NOT NULL DEFAULT 'A'
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,cidade_id INT NOT NULL
,CONSTRAINT pk_fornecedor PRIMARY KEY (id)
,CONSTRAINT fk_fornecedor_cidade FOREIGN KEY (cidade_id) REFERENCES cidade (id)
,CONSTRAINT coluna_situaçao_fornecedor CHECK (situaçao IN ('A','I'))
,CONSTRAINT fornecedor_unico UNIQUE (contato,cnpj,cidade_id)
);

INSERT INTO fornecedor (nome,cnpj,endereço,telefone,ddd_telefone,contato,cidade_id) VALUES ('ENERGIZA LTDA',44828671000110,'RUA MATO GROSSO CENTRO NUMERO 389',34459944,44,'ENERGIZA@HOTMAIL.COM',1);
INSERT INTO fornecedor (nome,cnpj,endereço,telefone,ddd_telefone,contato,cidade_id) VALUES ('POWER ONE SA',91084733000107,'RUA TIRADENTES JAD AGUA VERDE NUMERO 399',999631258,41,'POWER@GMAIL.COM',2);
INSERT INTO fornecedor (nome,cnpj,endereço,telefone,ddd_telefone,contato,cidade_id) VALUES ('RAIOVAC LTDA',33319727000195,'AVENIDA 7 DE SETEMBRO CENTRO NUMERO 659',34225539,43,'RAIOVAC@HOTMAIL.COM',3);
INSERT INTO fornecedor (nome,cnpj,endereço,telefone,ddd_telefone,contato,cidade_id) VALUES ('LIGHT POWER',17756318000108,'RUA PEDRO TAQUES CENTRO NUMERO 389',988116974,19,'LIGHT@HOTMAIL.COM',4);

CREATE TABLE compra(
id INT NOT NULL AUTO_INCREMENT
,desconto DECIMAL (9,2)
,sem_desconto DECIMAL (9,2)
,diferença_valor DECIMAL (9,2) AS (sem_desconto - desconto)/**Auxilia o financeiro da empresa a avaliar se o desconto é satisfatorio, em uma grande quantidade de compra de produtos**/
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,fornecedor_id INT NOT NULL
,CONSTRAINT pk_compra PRIMARY KEY (id)
,CONSTRAINT fk_compra_fornecedor FOREIGN KEY (fornecedor_id) REFERENCES fornecedor (id)
);

INSERT INTO compra (desconto,sem_desconto,fornecedor_id) VALUES (35.00,45.00,3);
INSERT INTO compra (desconto,sem_desconto,fornecedor_id) VALUES (100.00,120.00,1);
INSERT INTO compra (desconto,sem_desconto,fornecedor_id) VALUES (50.00,70.00,2);
INSERT INTO compra (desconto,sem_desconto,fornecedor_id) VALUES (15.00,30.00,4);
INSERT INTO compra (desconto,sem_desconto,fornecedor_id) VALUES (10.00,23.00,1);

CREATE TABLE iten_compra(
compra_id INT NOT NULL 
,produto_id INT NOT NULL
,nome VARCHAR (200) NOT NULL
,quantidade INT NOT NULL
,preço DECIMAL (9,2)
,PRIMARY KEY (compra_id,produto_id)
);

INSERT INTO iten_compra (nome,quantidade,preço,compra_id,produto_id) VALUES ('Disjuntor Monopolar  25A',4,35.00,1,1);
INSERT INTO iten_compra (nome,quantidade,preço,compra_id,produto_id) VALUES ('Cabo de cobre flexível isolado',2,100.00,2,2);
INSERT INTO iten_compra (nome,quantidade,preço,compra_id,produto_id) VALUES ('Interruptor simples (1 módulo)',2,50.00,3,3);
INSERT INTO iten_compra (nome,quantidade,preço,compra_id,produto_id) VALUES ('Caixa retangular 4" x 2"',6,15.00,4,4);
INSERT INTO iten_compra (nome,quantidade,preço,compra_id,produto_id) VALUES ('Eletroduto de pvc',7,10.00,5,5);

CREATE TABLE pagamento(
id INT NOT NULL AUTO_INCREMENT
,situaçao CHAR (1) NOT NULL DEFAULT 'E'
,numero_parcela INT
,desconto DECIMAL (9,2)
,sem_desconto DECIMAL (9,2)
,juros DECIMAL (9,2)
,total_com_juros DECIMAL (9,2)
,compra_id INT NOT NULL
,iten_caixa_id INT NOT NULL
,CONSTRAINT pk_pagamento PRIMARY KEY (id)
,CONSTRAINT fk_pagamento_compra FOREIGN KEY (compra_id) REFERENCES compra (id)
,CONSTRAINT fk_pagamento_iten_caixa FOREIGN KEY (iten_caixa_id) REFERENCES iten_caixa (id)
,CONSTRAINT coluna_situaçao_pagamento CHECK (situaçao IN ('E','N')) -- E = Efetuado ou N = Não Efetuado
,CONSTRAINT pagamento_unico UNIQUE (compra_id,iten_caixa_id)
);

CREATE TABLE categoria(
id INT NOT NULL AUTO_INCREMENT
,nome VARCHAR (200) NOT NULL
,descrição VARCHAR (300) NOT NULL
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,CONSTRAINT pk_categoria PRIMARY KEY (id)
);

CREATE TABLE produto_categoria(
produto_id INT NOT NULL 
,categoria_id INT NOT NULL 
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,PRIMARY KEY (produto_id,categoria_id)
);

CREATE TABLE tipo(
id INT NOT NULL AUTO_INCREMENT
,nome VARCHAR (200) NOT NULL
,descrição VARCHAR (300) NOT NULL
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,CONSTRAINT pk_tipo PRIMARY KEY (id)
);

CREATE TABLE produto_tipo(
produto_id INT NOT NULL 
,tipo_id INT NOT NULL 
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,PRIMARY KEY (produto_id,tipo_id)
);

CREATE TABLE produto(
id INT NOT NULL AUTO_INCREMENT
,nome VARCHAR (200) NOT NULL
,descriçao VARCHAR (200) NOT NULL
,nome_descriçao VARCHAR (400) AS (CONCAT(nome,' - ', descriçao))/** Coluna virtual que evita as incosistências de atualizações das duas colunas **/
,preço DECIMAL (9,2) NOT NULL
,estoque INT NOT NULL
,situaçao CHAR (1) NOT NULL DEFAULT 'D'
,vencimento DATE NOT NULL
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,CONSTRAINT pk_produto PRIMARY KEY (id)
,CONSTRAINT coluna_situaçao_produto CHECK (situaçao IN ('D','E')) -- D = Disponivel e E = Esgotado
);

INSERT INTO produto (nome,descriçao,preço,estoque,vencimento) VALUES ('Disjuntor Monopolar  25A','Curva C Siemens e ou equivalente',35.00,3,'2021-10-22');
INSERT INTO produto (nome,descriçao,preço,estoque,vencimento) VALUES ('Cabo de cobre flexível isolado','35 mm² anti-chama 0,6/1,0 kv cor preto',100.00,2,'2021-10-22');
INSERT INTO produto (nome,descriçao,preço,estoque,vencimento) VALUES ('Interruptor simples (1 módulo)','10a/250v incluindo suporte e placa',50.00,2,'2022-11-11');
INSERT INTO produto (nome,descriçao,preço,estoque,vencimento) VALUES ('Caixa retangular 4" x 2"','média (1,30 m do piso) PVC',15.00,6,'2020-09-01');
INSERT INTO produto (nome,descriçao,preço,estoque,vencimento) VALUES ('Eletroduto de pvc','rigido roscavel (1 1/2")',10.00,7,'2023-09-11');

CREATE TABLE venda(
id INT NOT NULL AUTO_INCREMENT
,desconto DECIMAL (9,2)
,sem_desconto DECIMAL (9,2)
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,cliente_id INT NOT NULL
,funcionario_id INT NOT NULL
,CONSTRAINT pk_venda PRIMARY KEY (id)
,CONSTRAINT fk_venda_cliente FOREIGN KEY (cliente_id) REFERENCES cliente (id)
,CONSTRAINT fk_venda_funcionario FOREIGN KEY (funcionario_id) REFERENCES funcionario (id)
);

INSERT INTO venda (desconto, sem_desconto, data_cadastro,cliente_id,funcionario_id) VALUES (200.00,400.00,'2010-05-30',1,2);
INSERT INTO venda (desconto, sem_desconto, data_cadastro,cliente_id,funcionario_id) VALUES (350.00,450.00,'2010-06-05',2,3);
INSERT INTO venda (desconto, sem_desconto, data_cadastro,cliente_id,funcionario_id) VALUES (500.00,600.00,'2010-07-28',3,4);
INSERT INTO venda (desconto, sem_desconto, data_cadastro,cliente_id,funcionario_id) VALUES (1000.00,1075.00,'2010-08-29',4,1);


CREATE TABLE iten_venda(
venda_id INT NOT NULL 
,produto_id INT NOT NULL
,quantidade INT NOT NULL
,preco DECIMAL (9,2)
,desconto INT DEFAULT 0
,total DECIMAL(9,2) AS (quantidade * preco - desconto) STORED
,CONSTRAINT pk_iten_venda PRIMARY KEY (venda_id,produto_id)
,CONSTRAINT fk_iten_venda_venda FOREIGN KEY (venda_id) REFERENCES venda (id)
,CONSTRAINT fk_iten_venda_produto_id FOREIGN KEY (produto_id) REFERENCES produto (id)
);


INSERT INTO iten_venda (venda_id, produto_id,quantidade,preco,desconto) VALUES (1,1,2,400.00,200.00);
INSERT INTO iten_venda (venda_id, produto_id,quantidade,preco,desconto) VALUES (2,2,1,450.00,350.00);
INSERT INTO iten_venda (venda_id, produto_id,quantidade,preco,desconto) VALUES (3,3,1,600.00,500.00);
INSERT INTO iten_venda (venda_id, produto_id,quantidade,preco,desconto) VALUES (4,4,3,1075.00,1000.00);


CREATE TABLE recebimento(
id INT NOT NULL AUTO_INCREMENT
,situaçao CHAR (1) NOT NULL DEFAULT 'E'
,especie VARCHAR (45)
,numero_parcela INT
,desconto DECIMAL (9,2)
,sem_desconto DECIMAL (9,2)
,juros DECIMAL (9,2)
,total_com_juros DECIMAL (9,2)
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,venda_id INT NOT NULL
,iten_caixa_id INT NOT NULL
,parcela_receber_id INT NOT NULL
,CONSTRAINT pk_recebimento PRIMARY KEY (id)
,CONSTRAINT fk_recebimento_venda FOREIGN KEY (venda_id) REFERENCES venda (id)
,CONSTRAINT fk_recebimento_iten_caixa FOREIGN KEY (iten_caixa_id) REFERENCES iten_caixa (id)
,CONSTRAINT fk_recebimento_parcela_receber FOREIGN KEY (parcela_receber_id) REFERENCES parcela_receber(id)
,CONSTRAINT coluna_situaçao_recebimento CHECK (situaçao IN ('E','N')) -- E = Efetuado ou N = Não Efetuado
,CONSTRAINT recebimento_unico UNIQUE (venda_id,iten_caixa_id,parcela_receber_id)
);

INSERT INTO recebimento (especie, desconto ,sem_desconto,venda_id ,iten_caixa_id, parcela_receber_id) VALUES ("avista",850.00,950.00,1,1,1);


01- Escreva quarto triggers de sintaxe - a trigger não precisa ter funcionalidade, basta não dar erro de sintaxe. Use variável global para testar.

- Faça uma declarando variáveis e com select into; 
SET @teste = 0;
DELIMITER // 
CREATE TRIGGER declarando_variaveis 
BEFORE
INSERT ON cliente FOR EACH ROW 
	BEGIN
		SELECT CPF_CNPJ FROM cliente WHERE cliente.id = 1 INTO @teste;
	END;
SELECT @teste; 
//
DELIMITER ;
- Faça a segunda com uma estrutura de decisão; 

SET @teste = "Erro";
DELIMITER // 
CREATE TRIGGER estrutura_decisao 
AFTER
INSERT ON cliente FOR EACH ROW 
	BEGIN
    	DECLARE CPF_CNPJ VARCHAR(100);
    	IF LENGTH(NEW.CPF_CNPJ) <= 14 THEN
		SET @teste = "Os dados são válidos";
	ELSE
		SET @teste = "Dados inválidos";
		END IF;
	END;
//
DELIMITER ;
SELECT @teste;



- Faça a terceira que gere erro, impedindo a ação;
DELIMITER //
CREATE TRIGGER checa_cpf
BEFORE INSERT ON cliente
FOR EACH ROW
BEGIN
      	IF LENGTH(NEW.CPF_CNPJ) > 11 THEN
                	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "NÚMERO DE CARACTERES EXCEDIDO";
      	END IF;
END;
 
//
DELIMITER ;

- Faça a quarta que utilize a variável new e old - tente diferenciar. 

DELIMITER //
CREATE TRIGGER validar_alteracao_cliente_inativo
 BEFORE UPDATE ON cliente
 FOR EACH ROW
 BEGIN
     IF NEW.ativo <> OLD.ativo AND
        EXISTS(SELECT * FROM conta_receber WHERE CLIENTE_ID = NEW.id)
    THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ALTERAÇÃO INVÁLIDA - CLIENTE POSSUI DÍVIDA ';
     END IF;
 END
 //
DELIMITER ;

02- Uma trigger que tem a função adicionar a entrada de produtos no estoque deve ser associado para qual:

Tabela?
	
•	Tabela?
	R: ITEM_VENDA
	
• 	Tempo?

	R: AFTER
	
•	Evento?
	R: INSERT	
	
•	Precisa de variáveis? Quais?

	R: Não é necessário, pois a função no UPDATE já realiza todas as conexões com as tabelas.
	Implemente a trigger. 

DELIMITER // 
CREATE TRIGGER adicao_estoque
AFTER INSERT ON item_venda FOR EACH ROW
BEGIN 
	UPDATE produto SET estoque = estoque + OLD.quantidade WHERE produto.id = OLD.produto_id;
END;
//
DELIMITER ;
–teste
SELECT estoque FROM produto WHERE id = 1;

03- Uma trigger que tem a função criar um registro de auditoria quando um pagamento e recebimento for alterada deve ser associado para qual(is):


•	Tabela(s)?

	R:PAGAMENTO e RECEBIMENTO
•	Tempo?

	R:AFTER
•	Evento?
	
	R:UPDATE
•	Implemente a trigger (pode criar a tabela de auditoria)

CREATE TABLE auditoria_pagamento(
id INT NOT NULL AUTO_INCREMENT
, pagamento_id INT NOT NULL
, data_hora_alteracao DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,CONSTRAINT auditoria_pagamento_pk PRIMARY KEY (id)
);
 
CREATE TABLE auditoria_recebimento(
id INT NOT NULL AUTO_INCREMENT
, recebimento_id INT NOT NULL
, data_hora_alteracao DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,CONSTRAINT auditoria_recebimento_pk PRIMARY KEY (id)
);
 
DELIMITER //
CREATE TRIGGER monitora_pagamento
AFTER UPDATE ON pagamento
FOR EACH ROW
BEGIN
      	INSERT INTO auditoria_pagamento (pagamento_id) VALUES (NEW.pagamento.id);
END;
//
DELIMITER ;
 
DELIMITER //
CREATE TRIGGER monitora_recebimento
AFTER UPDATE ON recebimento
FOR EACH ROW
BEGIN
      	INSERT INTO auditoria_recebimento (recebimento_id) VALUES (NEW.recebimento.id);
END;
//
DELIMITER ;

04- Uma trigger que tem a função impedir a venda de um produto inferior a 50% do preço de venda deve ser associado para qual:



•	Tabela(s)?

	R:ITEM_VENDA
•	Tempo?

	R:BEFORE
•	Evento?
	
	R:INSERT
•	Implemente a trigger

DELIMITER // 
CREATE TRIGGER impedir_venda_produto_desconto
BEFORE INSERT ON item_venda FOR EACH ROW
BEGIN 
DECLARE preco_produto DECIMAL (8,2); 
    	DECLARE preco_unitario DECIMAL (8,2);
    
    SELECT preco_venda INTO preco_produto FROM produto WHERE id = NEW.produto_id;
    SELECT preco_unidade INTO preco_unitario FROM item_venda;
    
    IF preco_produto * 0.5 > preco_unitario THEN
		signal sqlstate '45000' set message_text = 'Valor de desconto inapropriado para venda';
	END IF;
END;
//
DELIMITER ;	
–teste
INSERT INTO item_venda(produto_id,venda_id,quantidade,preco_unidade) VALUES (1,1,4,27);

05- Este é para testar a sintaxe - tente implementar sem o script
Uma trigger que tem a função de gerar o RA automático na tabela ALUNO deve ser associada para qual

•	Tabela(s)?

	R:ALUNO
•	Tempo?

	R:BEFORE
•	Evento?
	
	R:INSERT
•	Precisa de variáveis? Quais?
	
	R:Sim é necessario.
•	Implemente a trigger - RA igual a concatenação do ano corrente, código do curso e o id do cadastro do aluno. 

DELIMITER //
CREATE TRIGGER ra_auto
BEFORE INSERT ON aluno 
FOR EACH ROW
BEGIN
DECLARE ra VARCHAR (200);
      	IF NEW.aluno_id THEN
		UPDATE aluno SET ra = CONCAT(NEW.DATA_CADASTRO(YYYY), NEW.curso_id, NEW.id);
END;
//
DELIMITER ;


06- De acordo com o seu projeto de banco de dados, pense em pelo menos 3 triggers úteis. Discuta com os seus colegas em relação à relevância e implemente-as.

Primeira Trigger --Criada com o intuito de atualização do estoque dos produtos conforme a quantidade da venda por unidade.

DELIMITER //
CREATE TRIGGER venda_estoque
AFTER INSERT ON iten_venda
FOR EACH ROW
BEGIN
	DECLARE estocagem INT;
        DECLARE quantia INT;
       
	SELECT quantidade INTO quantia FROM iten_venda; 
        SELECT estoque INTO estocagem FROM produto WHERE produto.id = NEW.produto_id;
        
      	IF quantia > estocagem THEN
			BEGIN
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "Quantidade de produtos para venda é superior ao estoque disponivel";
			END;
		ELSEIF quantia = estocagem THEN
			BEGIN
				UPDATE produto SET estoque = estoque - NEW.quantidade  WHERE produto.id = NEW.produto_id;
				UPDATE produto SET situaçao = 'E' WHERE produto.id = NEW.produto_id;
            END;
		ELSE
			BEGIN
				UPDATE produto SET estoque = estoque - NEW.quantidade WHERE produto.id = NEW.produto_id;
            END;
      	END IF;
END;
//
DELIMITER ;


SELECT estoque,situaçao FROM produto;

Segunda Trigger -- Criada para separação dos tipos de recebimento e atualizações das tabelas conforme a espécie de recebimento.

DELIMITER //
CREATE TRIGGER valor_recebimento_iten_caixa
AFTER INSERT ON recebimento
FOR EACH ROW
BEGIN
	DECLARE tipo VARCHAR (45);
    
    SELECT especie INTO tipo FROM recebimento;
    
	IF tipo = "avista" THEN
		UPDATE iten_caixa SET valor_novo = valor_novo + valor + NEW.desconto WHERE id = NEW.iten_caixa_id;
    ELSE
		UPDATE parcela_receber SET valor = valor + NEW.sem_desconto WHERE id = NEW.iten_caixa_id;
	END IF;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER saldo_final_caixa
AFTER UPDATE ON iten_caixa
FOR EACH ROW
BEGIN
	
	INSERT INTO iten_caixa (valor, valor_novo, especie, caixa_id) VALUES (OLD.valor, NEW.valor_novo, NEW.especie, NEW.caixa_id);
	UPDATE caixa SET saldo_final= saldo_final + saldo + NEW.valor_novo WHERE id = NEW.caixa_id;
END;
//
DELIMITER ;
