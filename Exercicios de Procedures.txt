 DROP DATABASE IF EXISTS marcos_db;

CREATE DATABASE marcos_db;

USE marcos_db;

CREATE TABLE estado(
id INT NOT NULL AUTO_INCREMENT
,nome VARCHAR (200) NOT NULL 
,sigla CHAR (2) NOT NULL 
,situaçao CHAR (1) NOT NULL DEFAULT 'A'
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,CONSTRAINT pk_estado PRIMARY KEY (id)
,CONSTRAINT coluna_situaçao_estado CHECK (situaçao IN ('A','I'))
,CONSTRAINT estado_unico UNIQUE (nome,sigla)
);

INSERT INTO estado (nome,sigla) VALUES ('PARANÁ','PR');
INSERT INTO estado (nome,sigla) VALUES ('SÃO PAULO','SP');


CREATE TABLE cidade(
id INT NOT NULL AUTO_INCREMENT
,nome VARCHAR (200) NOT NULL
,situaçao CHAR (1) NOT NULL DEFAULT 'A'
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,estado_id INT NOT NULL
,CONSTRAINT pk_cidade PRIMARY KEY (id)
,CONSTRAINT fk_cidade_estado FOREIGN KEY (estado_id) REFERENCES estado (id)
,CONSTRAINT coluna_situaçao_cidade CHECK (situaçao IN ('A', 'I'))
,CONSTRAINT cidade_unica UNIQUE (nome, estado_id)
);

INSERT INTO cidade (nome,estado_id) VALUES ('PARANAVAÍ',1);
INSERT INTO cidade (nome,estado_id) VALUES ('CURITIBA',1);
INSERT INTO cidade (nome,estado_id) VALUES ('LONDRINA',1);
INSERT INTO cidade (nome,estado_id) VALUES ('CAMPINAS',2);

CREATE TABLE funcionario(
id INT NOT NULL AUTO_INCREMENT
,nome VARCHAR (200) NOT NULL
,cpf CHAR (12) NOT NULL
,endereço VARCHAR (200)
,situaçao CHAR (1) NOT NULL DEFAULT 'A'
,data_contratacao DATETIME NOT NULL 
,cidade_id INT NOT NULL
,CONSTRAINT pk_funcionario PRIMARY KEY (id)
,CONSTRAINT fk_funcionario_cidade FOREIGN KEY (cidade_id) REFERENCES cidade (id)
,CONSTRAINT coluna_situçao_funcionario CHECK (situaçao IN ('A','I'))
,CONSTRAINT funcionario_unico UNIQUE (cpf,cidade_id)
);

INSERT INTO funcionario (nome,cpf,endereço,data_contratacao,cidade_id) VALUES ('MARCOS',49978367845,'RUA DR SILVIO VIDAL JAD SÃO CRISTOVÃO NUMERO 355','2021-10-05',1);
INSERT INTO funcionario (nome,cpf,endereço,data_contratacao,cidade_id) VALUES ('ADRIANO',59223261233,'AVENIDA TANCREDO NEVES JAD PRUDÊNCIO NUMERO 945','2021-11-05',1);
INSERT INTO funcionario (nome,cpf,endereço,data_contratacao,cidade_id) VALUES ('RONALDO',10116445574,'RUA MANOEL RIBAS CENTRO NUMERO 641','2019-10-15',1);
INSERT INTO funcionario (nome,cpf,endereço,data_contratacao,cidade_id) VALUES ('JOANA',21318836958,'RUA SANTA CATARINA VILA CITY NUMERO 123','2023-10-05',1);

CREATE TABLE telefone(
id INT NOT NULL AUTO_INCREMENT
,ddd CHAR (2) NOT NULL
,numero CHAR (20) NOT NULL
,situaçao CHAR (1) NOT NULL DEFAULT 'A'
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,funcionario_id INT NOT NULL
,CONSTRAINT pk_telefone PRIMARY KEY (id)
,CONSTRAINT fk_telefone_funcionario FOREIGN KEY (funcionario_id) REFERENCES funcionario (id)
,CONSTRAINT coluna_situçao_telefone CHECK (situaçao IN ('A','I'))
,CONSTRAINT telefone_unico UNIQUE (funcionario_id)
);

INSERT INTO telefone (ddd,numero,funcionario_id) VALUES (44,995412297,1);
INSERT INTO telefone (ddd,numero,funcionario_id) VALUES (44,988416977,2);
INSERT INTO telefone (ddd,numero,funcionario_id) VALUES (44,999887023,3);
INSERT INTO telefone (ddd,numero,funcionario_id) VALUES (44,998374416,4);
 
CREATE TABLE caixa(
id INT NOT NULL AUTO_INCREMENT
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,situaçao CHAR (1) NOT NULL DEFAULT 'A'
,saldo DECIMAL (9,2)
,saldo_final DECIMAL (9,2)
,funcionario_id INT NOT NULL
,CONSTRAINT pk_caixa PRIMARY KEY (id)
,CONSTRAINT fk_caixa_funcionario FOREIGN KEY (funcionario_id) REFERENCES funcionario (id)
,CONSTRAINT coluna_situaçao_caixa CHECK (situaçao IN ('A','F'))
,CONSTRAINT caixa_unico UNIQUE (funcionario_id)
);

INSERT INTO caixa (saldo,saldo_final, funcionario_id) VALUES (1400.00,0,1);
INSERT INTO caixa (saldo,saldo_final, funcionario_id) VALUES (950.00,0,2);

CREATE TABLE iten_caixa(
id INT NOT NULL AUTO_INCREMENT
,valor DECIMAL (9,2)
,valor_novo DECIMAL (9,2)
,especie VARCHAR (45)
,hora VARCHAR (45)
,caixa_id INT NOT NULL
,CONSTRAINT pk_iten_caixa PRIMARY KEY (id)
,CONSTRAINT fk_iten_caixa_caixa FOREIGN KEY (caixa_id) REFERENCES caixa (id)
,CONSTRAINT iten_caixa_unico UNIQUE (caixa_id)
);

INSERT INTO iten_caixa (valor, valor_novo, caixa_id) VALUES (750.00, 0, 1);

CREATE TABLE cliente(
id INT NOT NULL AUTO_INCREMENT
,nome VARCHAR (200) NOT NULL
,endereço VARCHAR (200) NOT NULL
,contato VARCHAR (100) NOT NULL 
,telefone CHAR (20) NOT NULL
,ddd_telefone CHAR (2) NOT NULL 
,cpf_cnpj CHAR (20) NOT NULL 
,situaçao CHAR (1) NOT NULL DEFAULT 'A'
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,cidade_id INT NOT NULL
,CONSTRAINT pk_cliente PRIMARY KEY (id)
,CONSTRAINT fk_cliente_cidade FOREIGN KEY (cidade_id) REFERENCES cidade (id)
,CONSTRAINT coluna_situaçao_cliente CHECK (situaçao IN ('A','I'))
,CONSTRAINT cliente_unico UNIQUE (contato,cpf_cnpj,cidade_id)
);


INSERT INTO cliente (nome,cpf_cnpj,endereço,contato,telefone,ddd_telefone,cidade_id) VALUES ('JE EMPREENDIMENTOS',69304100000108,'RUA PERNAMBUCO CENTRO NUMERO 362','JE@GMAIL.COM',34226698,44,1);
INSERT INTO cliente (nome,cpf_cnpj,endereço,contato,telefone,ddd_telefone,cidade_id) VALUES ('MA BURITTI',85684280000157,'RUA AMADOR AGUIAR JAD OURO BRANCO NUMERO 455','MABURITTI@HOMTMAIL.COM',998346621,44,1);
INSERT INTO cliente (nome,cpf_cnpj,endereço,contato,telefone,ddd_telefone,cidade_id) VALUES ('JJ CONSTRUÇÕES',29385774000160,'RUA SALVADOR CENTRO NUMERO 1001','JJ@GMAIL.COM',34463366,44,1);
INSERT INTO cliente (nome,cpf_cnpj,endereço,contato,telefone,ddd_telefone,cidade_id) VALUES ('RUBENS',20019587008,'RUA PARA VILA MARIANA NUMERO 741','RUBENS@HOTMAIL.COM',997354142,44,1);
INSERT INTO cliente (nome,cpf_cnpj,endereço,contato,telefone,ddd_telefone,cidade_id) VALUES ('JOAO',30145298755,'RUA DISTRITO FEDERAL CENTRO NUMERO 678','JOAO_PEREIRA@GMAIL.COM',988745246,44,1);
INSERT INTO cliente (nome,cpf_cnpj,endereço,contato,telefone,ddd_telefone,cidade_id) VALUES ('MARIA',69304100000108,'AVENIDA DOMINGOS SANCHES PARQUE MORUMBI NUMERO 851','MARIA@HOTMAIL.COM',34224528,44,1);


CREATE TABLE serviço(
id INT NOT NULL AUTO_INCREMENT
,situaçao CHAR (1) NOT NULL DEFAULT 'C'
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,funcionario_id INT NOT NULL
,CONSTRAINT pk_serviço PRIMARY KEY (id)
,CONSTRAINT fk_serviço_funcionario FOREIGN KEY (funcionario_id) REFERENCES funcionario (id)
,CONSTRAINT coluna_situaçao_serviço CHECK (situaçao IN ('C','N')) -- C = Concluido ou N = Não Concluido
);

INSERT INTO serviço (funcionario_id) VALUES (2);
INSERT INTO serviço (funcionario_id) VALUES (2);
INSERT INTO serviço (funcionario_id) VALUES (1);
INSERT INTO serviço (funcionario_id) VALUES (1);
INSERT INTO serviço (funcionario_id) VALUES (2);

CREATE TABLE ordem_serviço(
id INT NOT NULL AUTO_INCREMENT
,valor DECIMAL (9,2)
,descriçao VARCHAR (200) NOT NULL
,pagamento VARCHAR (10) NOT NULL
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,cliente_id INT NOT NULL
,funcionario_id INT NOT NULL
,CONSTRAINT pk_ordem_serviço PRIMARY KEY (id)
,CONSTRAINT fk_ordem_serviço_cliente FOREIGN KEY (cliente_id) REFERENCES cliente (id)
,CONSTRAINT fk_ordem_serviço_funcionario FOREIGN KEY (funcionario_id) REFERENCES funcionario (id)
,CONSTRAINT ordem_serviço_unico UNIQUE (cliente_id,funcionario_id)
);

INSERT INTO ordem_serviço (valor,descriçao,pagamento,cliente_id,funcionario_id) VALUES (150.00,'Troca e Remanejamento de Tomadas','avista',1,2);
INSERT INTO ordem_serviço (valor,descriçao,pagamento,cliente_id,funcionario_id) VALUES (250.00,'Instalação de Luminárias','avista',2,1);
INSERT INTO ordem_serviço (valor,descriçao,pagamento,cliente_id,funcionario_id) VALUES (500.00,'Troca de Cabeamento Elétrico','parcelado',3,2);
INSERT INTO ordem_serviço (valor,descriçao,pagamento,cliente_id,funcionario_id) VALUES (1000.00,'Instação do Quadro de Distribuição de Energia','avista',4,3);

CREATE TABLE forma_pagamento(
id INT NOT NULL AUTO_INCREMENT
,descriçao VARCHAR (200) NOT NULL
,quantidade_parcela INT
,entrada CHAR (1)
,situaçao CHAR (1)
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,CONSTRAINT pk_forma_pagamento PRIMARY KEY (id)
);

CREATE TABLE conta_receber(
id INT NOT NULL AUTO_INCREMENT
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,forma_pagamento_id INT NOT NULL
,ordem_serviço_id INT NOT NULL
,CONSTRAINT pk_conta_receber PRIMARY KEY (id)
,CONSTRAINT fk_conta_receber_forma_pagamento FOREIGN KEY (forma_pagamento_id) REFERENCES forma_pagamento(id)
,CONSTRAINT fk_conta_receber_ordem_serviço FOREIGN KEY (ordem_serviço_id ) REFERENCES ordem_serviço (id)
);

CREATE TABLE parcela_receber(
id INT NOT NULL AUTO_INCREMENT
,valor DECIMAL (9,2)
,valor_quitado DECIMAL (9,2)
,juros_pago DECIMAL (9,2)
,vencimento DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,conta_receber_id INT NOT NULL
,CONSTRAINT pk_parcela_receber PRIMARY KEY (id)
,CONSTRAINT fk_parcela_receber_conta_receber FOREIGN KEY (conta_receber_id) REFERENCES conta_receber (id)
);


CREATE TABLE fornecedor(
id INT NOT NULL AUTO_INCREMENT
,nome VARCHAR (200) NOT NULL
,cnpj VARCHAR (200) NOT NULL
,endereço VARCHAR (200) NOT NULL
,telefone CHAR (20) NOT NULL
,ddd_telefone CHAR (2) NOT NULL 
,contato CHAR (100) NOT NULL 
,situaçao CHAR (1) NOT NULL DEFAULT 'A'
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,cidade_id INT NOT NULL
,CONSTRAINT pk_fornecedor PRIMARY KEY (id)
,CONSTRAINT fk_fornecedor_cidade FOREIGN KEY (cidade_id) REFERENCES cidade (id)
,CONSTRAINT coluna_situaçao_fornecedor CHECK (situaçao IN ('A','I'))
,CONSTRAINT fornecedor_unico UNIQUE (contato,cnpj,cidade_id)
);

INSERT INTO fornecedor (nome,cnpj,endereço,telefone,ddd_telefone,contato,cidade_id) VALUES ('ENERGIZA LTDA',44828671000110,'RUA MATO GROSSO CENTRO NUMERO 389',34459944,44,'ENERGIZA@HOTMAIL.COM',1);
INSERT INTO fornecedor (nome,cnpj,endereço,telefone,ddd_telefone,contato,cidade_id) VALUES ('POWER ONE SA',91084733000107,'RUA TIRADENTES JAD AGUA VERDE NUMERO 399',999631258,41,'POWER@GMAIL.COM',2);
INSERT INTO fornecedor (nome,cnpj,endereço,telefone,ddd_telefone,contato,cidade_id) VALUES ('RAIOVAC LTDA',33319727000195,'AVENIDA 7 DE SETEMBRO CENTRO NUMERO 659',34225539,43,'RAIOVAC@HOTMAIL.COM',3);
INSERT INTO fornecedor (nome,cnpj,endereço,telefone,ddd_telefone,contato,cidade_id) VALUES ('LIGHT POWER',17756318000108,'RUA PEDRO TAQUES CENTRO NUMERO 389',988116974,19,'LIGHT@HOTMAIL.COM',4);

CREATE TABLE compra(
id INT NOT NULL AUTO_INCREMENT
,desconto DECIMAL (9,2)
,sem_desconto DECIMAL (9,2)
,diferença_valor DECIMAL (9,2) AS (sem_desconto - desconto)/**Auxilia o financeiro da empresa a avaliar se o desconto é satisfatorio, em uma grande quantidade de compra de produtos**/
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,fornecedor_id INT NOT NULL
,CONSTRAINT pk_compra PRIMARY KEY (id)
,CONSTRAINT fk_compra_fornecedor FOREIGN KEY (fornecedor_id) REFERENCES fornecedor (id)
);

INSERT INTO compra (desconto,sem_desconto,fornecedor_id) VALUES (35.00,45.00,3);
INSERT INTO compra (desconto,sem_desconto,fornecedor_id) VALUES (100.00,120.00,1);
INSERT INTO compra (desconto,sem_desconto,fornecedor_id) VALUES (50.00,70.00,2);
INSERT INTO compra (desconto,sem_desconto,fornecedor_id) VALUES (15.00,30.00,4);
INSERT INTO compra (desconto,sem_desconto,fornecedor_id) VALUES (10.00,23.00,1);

CREATE TABLE iten_compra(
compra_id INT NOT NULL 
,produto_id INT NOT NULL
,nome VARCHAR (200) NOT NULL
,quantidade INT NOT NULL
,preço DECIMAL (9,2)
,PRIMARY KEY (compra_id,produto_id)
);

INSERT INTO iten_compra (nome,quantidade,preço,compra_id,produto_id) VALUES ('Disjuntor Monopolar  25A',4,35.00,1,1);
INSERT INTO iten_compra (nome,quantidade,preço,compra_id,produto_id) VALUES ('Cabo de cobre flexível isolado',2,100.00,2,2);
INSERT INTO iten_compra (nome,quantidade,preço,compra_id,produto_id) VALUES ('Interruptor simples (1 módulo)',2,50.00,3,3);
INSERT INTO iten_compra (nome,quantidade,preço,compra_id,produto_id) VALUES ('Caixa retangular 4" x 2"',6,15.00,4,4);
INSERT INTO iten_compra (nome,quantidade,preço,compra_id,produto_id) VALUES ('Eletroduto de pvc',7,10.00,5,5);

CREATE TABLE pagamento(
id INT NOT NULL AUTO_INCREMENT
,situaçao CHAR (1) NOT NULL DEFAULT 'E'
,numero_parcela INT
,desconto DECIMAL (9,2)
,sem_desconto DECIMAL (9,2)
,juros DECIMAL (9,2)
,total_com_juros DECIMAL (9,2)
,compra_id INT NOT NULL
,iten_caixa_id INT NOT NULL
,CONSTRAINT pk_pagamento PRIMARY KEY (id)
,CONSTRAINT fk_pagamento_compra FOREIGN KEY (compra_id) REFERENCES compra (id)
,CONSTRAINT fk_pagamento_iten_caixa FOREIGN KEY (iten_caixa_id) REFERENCES iten_caixa (id)
,CONSTRAINT coluna_situaçao_pagamento CHECK (situaçao IN ('E','N')) -- E = Efetuado ou N = Não Efetuado
,CONSTRAINT pagamento_unico UNIQUE (compra_id,iten_caixa_id)
);

CREATE TABLE categoria(
id INT NOT NULL AUTO_INCREMENT
,nome VARCHAR (200) NOT NULL
,descrição VARCHAR (300) NOT NULL
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,CONSTRAINT pk_categoria PRIMARY KEY (id)
);

CREATE TABLE produto_categoria(
produto_id INT NOT NULL 
,categoria_id INT NOT NULL 
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,PRIMARY KEY (produto_id,categoria_id)
);

CREATE TABLE tipo(
id INT NOT NULL AUTO_INCREMENT
,nome VARCHAR (200) NOT NULL
,descrição VARCHAR (300) NOT NULL
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,CONSTRAINT pk_tipo PRIMARY KEY (id)
);

CREATE TABLE produto_tipo(
produto_id INT NOT NULL 
,tipo_id INT NOT NULL 
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,PRIMARY KEY (produto_id,tipo_id)
);

CREATE TABLE produto(
id INT NOT NULL AUTO_INCREMENT
,nome VARCHAR (200) NOT NULL
,descriçao VARCHAR (200) NOT NULL
,nome_descriçao VARCHAR (400) AS (CONCAT(nome,' - ', descriçao))/** Coluna virtual que evita as incosistências de atualizações das duas colunas **/
,preço DECIMAL (9,2) NOT NULL
,estoque INT NOT NULL
,situaçao CHAR (1) NOT NULL DEFAULT 'D'
,vencimento DATE NOT NULL
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,CONSTRAINT pk_produto PRIMARY KEY (id)
,CONSTRAINT coluna_situaçao_produto CHECK (situaçao IN ('D','E')) -- D = Disponivel e E = Esgotado
);

INSERT INTO produto (nome,descriçao,preço,estoque,vencimento) VALUES ('Disjuntor Monopolar  25A','Curva C Siemens e ou equivalente',35.00,3,'2021-10-22');
INSERT INTO produto (nome,descriçao,preço,estoque,vencimento) VALUES ('Cabo de cobre flexível isolado','35 mm² anti-chama 0,6/1,0 kv cor preto',100.00,2,'2021-10-22');
INSERT INTO produto (nome,descriçao,preço,estoque,vencimento) VALUES ('Interruptor simples (1 módulo)','10a/250v incluindo suporte e placa',50.00,2,'2022-11-11');
INSERT INTO produto (nome,descriçao,preço,estoque,vencimento) VALUES ('Caixa retangular 4" x 2"','média (1,30 m do piso) PVC',15.00,6,'2020-09-01');
INSERT INTO produto (nome,descriçao,preço,estoque,vencimento) VALUES ('Eletroduto de pvc','rigido roscavel (1 1/2")',10.00,7,'2023-09-11');

CREATE TABLE venda(
id INT NOT NULL AUTO_INCREMENT
,desconto DECIMAL (9,2)
,sem_desconto DECIMAL (9,2)
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,cliente_id INT NOT NULL
,funcionario_id INT NOT NULL
,CONSTRAINT pk_venda PRIMARY KEY (id)
,CONSTRAINT fk_venda_cliente FOREIGN KEY (cliente_id) REFERENCES cliente (id)
,CONSTRAINT fk_venda_funcionario FOREIGN KEY (funcionario_id) REFERENCES funcionario (id)
);

INSERT INTO venda (desconto, sem_desconto, data_cadastro,cliente_id,funcionario_id) VALUES (200.00,400.00,'2010-05-30',1,2);
INSERT INTO venda (desconto, sem_desconto, data_cadastro,cliente_id,funcionario_id) VALUES (350.00,450.00,'2010-06-05',2,3);
INSERT INTO venda (desconto, sem_desconto, data_cadastro,cliente_id,funcionario_id) VALUES (500.00,600.00,'2010-07-28',3,4);
INSERT INTO venda (desconto, sem_desconto, data_cadastro,cliente_id,funcionario_id) VALUES (1000.00,1075.00,'2010-08-29',4,1);


CREATE TABLE iten_venda(
venda_id INT NOT NULL 
,produto_id INT NOT NULL
,quantidade INT NOT NULL
,preco DECIMAL (9,2)
,desconto INT DEFAULT 0
,total DECIMAL(9,2) AS (quantidade * preco - desconto) STORED
,CONSTRAINT pk_iten_venda PRIMARY KEY (venda_id,produto_id)
,CONSTRAINT fk_iten_venda_venda FOREIGN KEY (venda_id) REFERENCES venda (id)
,CONSTRAINT fk_iten_venda_produto_id FOREIGN KEY (produto_id) REFERENCES produto (id)
);

INSERT INTO iten_venda (venda_id, produto_id,quantidade,preco,desconto) VALUES (1,1,1,400.00,200.00);
INSERT INTO iten_venda (venda_id, produto_id,quantidade,preco,desconto) VALUES (4,1,2,450.00,350.00);
INSERT INTO iten_venda (venda_id, produto_id,quantidade,preco,desconto) VALUES (2,1,5,600.00,500.00);
INSERT INTO iten_venda (venda_id, produto_id,quantidade,preco,desconto) VALUES (3,1,3,1075.00,1000.00);


CREATE TABLE recebimento(
id INT NOT NULL AUTO_INCREMENT
,situaçao CHAR (1) NOT NULL DEFAULT 'E'
,especie VARCHAR (45)
,numero_parcela INT
,desconto DECIMAL (9,2)
,sem_desconto DECIMAL (9,2)
,juros DECIMAL (9,2)
,total_com_juros DECIMAL (9,2)
,data_cadastro DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
,venda_id INT NOT NULL
,iten_caixa_id INT NOT NULL
,CONSTRAINT pk_recebimento PRIMARY KEY (id)
,CONSTRAINT fk_recebimento_venda FOREIGN KEY (venda_id) REFERENCES venda (id)
,CONSTRAINT fk_recebimento_iten_caixa FOREIGN KEY (iten_caixa_id) REFERENCES iten_caixa (id)
,CONSTRAINT coluna_situaçao_recebimento CHECK (situaçao IN ('E','N')) -- E = Efetuado ou N = Não Efetuado
,CONSTRAINT recebimento_unico UNIQUE (venda_id,iten_caixa_id)
);

INSERT INTO recebimento (especie, desconto ,sem_desconto,venda_id ,iten_caixa_id) VALUES ("avista",850.00,950.00,1,1);

01- Escreva quarto procedures de sintaxe - não precisa ter funcionalidade, basta não dar erro de sintaxe. Use variável global para testar.

- Faça uma declarando variáveis e com select into;

SET @teste1 = '444.444.444-44';

DELIMITER // 
CREATE PROCEDURE variaveis (id_cliente INT)
		BEGIN
			SELECT CPF_CNPJ INTO @teste1 FROM cliente WHERE cliente.id = id_cliente;
		END;
//
DELIMITER ;


CALL variaveis (3);
SELECT @teste1; 

- Faça a segunda com uma estrutura de decisão; 

SET @teste2 = "Erro";

drop PROCEDURE estrutura_decisao;
DELIMITER // 
CREATE PROCEDURE estrutura_decisao(cpf_cnpj VARCHAR(45))
	BEGIN
    	IF LENGTH(cpf_cnpj) > 14 THEN
		SET @teste2 = "Caracteres excedidos";
		END IF;
	END;
//
DELIMITER ;

CALL estrutura_decisao('222.222.222');
SELECT @teste2;

- Faça a terceira que gere erro, impedindo a ação;

DELIMITER //
CREATE PROCEDURE verifica_cpf (cpf_cnpj VARCHAR(18))
	BEGIN
      	IF LENGTH(cpf_cnpj) > 14 OR LENGTH(cpf_cnpj) < 14 THEN
                	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "NÚMERO DE CARACTERES INCORRETO";
      	END IF;
	END;
//
DELIMITER ;

CALL verifica_cpf ('555.555.555-555');

- Faça a quarta com if e else. 
SET @teste4 = "Erro";
drop PROCEDURE if_else;
DELIMITER // 
CREATE PROCEDURE estrutura_decisao(cpf_cnpj VARCHAR(45))
	BEGIN
    	IF LENGTH(cpf_cnpj) > 14 OR LENGTH(cpf_cnpj) < 14 THEN
		SET @teste4 = "Os dados são invalidos";
	ELSE
		SET @teste4 = "Os dados são válidos";
		END IF;
	END;
//
DELIMITER ;

CALL estrutura_decisao('222.222.222-222');
SELECT @teste4;


02 - Escreva uma procedure que registre a baixa de um produto e já atualize devidamente o estoque do produto. Antes das ações, verifique se o produto é ativo.

DELIMITER //
CREATE PROCEDURE INSERIR_ITEM_VENDA(ID_VENDA INT, ID_PRODUTO INT, QUANTIDADE_PRODUTO INT, PRECO_UNIDADE_PRODUTO DECIMAL(12,2), DESCONTO_IV DECIMAL(12,2))

BEGIN
    DECLARE STATUS_PRODUTO CHAR(1);
    DECLARE QUANTIDADE_ANTIGA INT;
    SELECT STATUS INTO STATUS_PRODUTO FROM PRODUTO WHERE ID = ID_PRODUTO;
    IF STATUS_PRODUTO = 'n' OR STATUS_PRODUTO = 'N' THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'PRODUTO INATIVO';
    ELSE
        INSERT INTO PRODUTO (VENDA_ID, PRODUTO_ID, QUANTIDADE, PRECO_UNIDADE, DESCONTO) VALUES (ID_VENDA, ID_PRODUTO, QUANTIDADE_PRODUTO, PRECO_UNIDADE_PRODUTO, DESCONTO_IV);
        SELECT ESTOQUE INTO QUANTIDADE_ANTIGA FROM PRODUTO WHERE ID = ID_PRODUTO;
        UPDATE PRODUTO SET ESTOQUE = QUANTIDADE_ANTIGA - QUANTIDADE_PRODUTO WHERE ID = ID_PRODUTO;
	END IF;
END;
// DELIMITER ;


03 - Escreva uma procedure que altere o preço de um produto vendido (venda já realizada - necessário verificar a existência da venda). Não permita altearções abusivas - preço de venda abaixo do preço de custo. É possível implementar esta funcionalidade sem a procedure? Se sim, indique como, bem como as vantagens e desvantagens.

04 - Escreva uma procedure que registre vendas de produtos e já defina o total da venda. É possível implementar a mesma funcionalidade por meio da trigger? Qual seria a diferença?

05- Para o controle de salário de funcionários de uma empresa e os respectivos adiantamentos (vales):
 
- quais tabelas são necessárias?

-- RESPOSTA: É necessaria a tabela adiatamento e as colunas funcionario_id, valor, data_adiantamento.

06- De acordo com o seu projeto de banco de dados, pense em pelo menos 3 procedures úteis. Discuta com os seus colegas em relação a relevância e implemente-as.

DELIMITER //
CREATE PROCEDURE produto_verificar(pid INT, pnome VARCHAR (200))
BEGIN
    DECLARE nome_prod VARCHAR(200);
    DECLARE descriçao_prod VARCHAR(200);
	DECLARE preço_prod INT;
    DECLARE estoque_prod INT;
    DECLARE vencimento_prod DATE;
    DECLARE qtde INT;

IF pid >= 1 AND pid <= 100 THEN
      IF LENGTH(pnome) >= 1 AND LENGTH(pnome) <= 200 THEN
        SELECT COUNT(*) INTO qtde FROM produto WHERE produto.id = pid;
IF qtde = 0 THEN
   SELECT COUNT(*) INTO qtde FROM produto WHERE UPPER(nome) = UPPER(pnome);
             IF qtde = 0 THEN
	          INSERT INTO produto(nome, descriçao, preço, estoque, vencimento)
                 VALUES (nome_prod , descriçao_prod, preço_prod, estoque_prod, vencimento_prod);
	      ELSE
				SELECT'O valor do campo nome já existe.';
	      END IF; 
            ELSE
                SELECT 'O valor do campo id já existe';
          END IF;
       ELSE
           SELECT 'O valor do campo nome está fora da faixa de valores aceitáveis';
	   END IF;
   ELSE
     SELECT 'O valor do campo id está fora da faixa de valores aceitáveis';
END IF;

END //
DELIMITER ;

CALL produto_verificar(1,'Disjuntor Monopolar  25A');

DELIMITER //
CREATE PROCEDURE produto_Update(p_id INT, p_nome VARCHAR(200), p_preço DECIMAL (9,2))
BEGIN 
	
    DECLARE produto_nome  VARCHAR(200);
	DECLARE produto_preço  DECIMAL (9,2);

    
    SELECT nome INTO produto_nome FROM produto WHERE nome = p_nome;
	SELECT preço INTO produto_preço FROM produto WHERE preço = p_preço;
	
    IF (((produto_id > 0) && (produto_id != '') ) && (produto_nome != '') && (produto_preço != '')) THEN
		SELECT COUNT(*) INTO produto_id FROM produto WHERE id = p_id;
		UPDATE produto SET nome = p_nome, preço = p_preço  WHERE produto.id = p_id;
	ELSE
		SELECT 'Os novos Nomes e Preços devem ser informados!' AS Msg;
	END IF; 
END;
//
DELIMITER ;

CALL produto_Update(2, 'Eletroudo de 1/2 polegada"', '150.00');

DELIMITER //
CREATE PROCEDURE imperdir_venda (id_venda INT,id_produto INT, quantidade INT, preco_unidade DECIMAL(9,2) )
BEGIN
    DECLARE est_quantidade INT; 
    DECLARE iten_quantidade INT; 
    
    SELECT produto.estoque INTO est_quantidade FROM produto WHERE produto.id = id_produto;
    SELECT quantidade INTO iten_quantidade FROM iten_venda;
    
    IF est_quantidade = 0 && iten_quantidade > est_quantidade  THEN
		BEGIN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Produto Esgotado ou quantidade de venda superior ao disponivel';
		END;
	END IF;
   
   INSERT INTO item_venda (venda_id, produto_id, quantidade, preco) VALUES ( id_venda, id_produto,  quantidade, preco);
    UPDATE produto SET estoque = estoque - quantidade WHERE produto.id = id_produto;
END;
//
DELIMITER ;

SELECT * FROM produto;

SET @Preco = (SELECT preço FROM produto WHERE id = produto_id);
CALL imperdir_venda(1,1,2,@Preco);

07- Explique as diferenças entre trigger, função e procedure. Indique as vantagens e desvantagens em utilizar a procedure.
